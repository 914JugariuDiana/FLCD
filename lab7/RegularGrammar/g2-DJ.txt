N=RELATION condition expression assignstmt factor forstmt stmt whilestmt ifstmt structstmt iostmt simplestmt type type1 arraydecl decllist declaration program main function stmtlist cmpdstmt
sigma=boolean char integer string float + - * / ^ mod < > <= >= == = != and or for ( ) ; ) { } while if else , READ WRITE PRINT IDENTIFIER ++ -- nr defined func constants
P=main|function
P=main|program
P=function|defined type func name ( type1 IDENTIFIER ) { program }
P=type1|boolean
P=type1|integer
P=type1|string
P=type1|char
P=type1|float
P=program|decllist ; cmpdstmt ;
P=decllist|arraydecl
P=decllist|declaration ;
P=decllist|decllist
P=declaration|type1 IDENTIFIER ;
P=arraydecl|type1 IDENTIFIER [ nr ] ;
P=type|type1
P=type|arraydecl
P=cmpdstmt|stmtlist
P=stmtlist|stmt
P=stmtlist|stmtlist
P=stmt|simplestmt
P=stmt|structstmt
P=simplestmt|assignstmt
P=simplestmt|iostmt
P=assignstmt|IDENTIFIER = expression
P=expression|constants
P=expression|expression
P=expression|expression + factor
P=expression|expression - factor
P=expression|expression * factor
P=expression|expression / factor
P=expression|expression ^ factor
P=expression|expression mod factor
P=expression|factor
P=factor|( expression )
P=factor|IDENTIFIER
P=iostmt|READ ( IDENTIFIER )
P=iostmt|WRITE ( IDENTIFIER )
P=iostmt|PRINT ( IDENTIFIER )
P=structstmt|ifstmt
P=structstmt|whilestmt
P=structstmt|forstmt
P=ifstmt|if ( condition ) { stmt } else { stmt }
P=whilestmt|while ( condition ) { stmt }
P=forstmt|for ( assignstmt ; condition ; factor ) { stmt }
P=condition|expression RELATION expression and condition
P=condition|expression RELATION expression or condition
P=RELATION|<
P=RELATION|<=
P=RELATION|==
P=RELATION|!=
P=RELATION|>=
P=RELATION|>
S=main