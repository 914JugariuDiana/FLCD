N=RELATION condition expression assignstmt factor forstmt stmt whilestmt ifstmt cmpstmt structstmt iostmt simplestmt type type1 arraydecl decllist declaration program main
sigma=boolean char integer string float + - * / ^ mod < > <= >= == = != and or for ( ) ; ) { } while if else , READ WRITE PRINT IDENTIFIER ++ -- nr defined func
P=main | function 
P=main |  program
P=function | defined type func name ( type1 IDENTIFIER ) { program }
P=type1 | boolean  
P=type1 | integer 
P=type1 | string
P=type1 | char 
P=type1 | float
P=program | decllist;cmpdstmt;
P=decllist | arraydecl 
P=decllist | declaration ; decllist
P=declaration | type1 IDENTIFIER ; 
P=declaration | , IDENTIFIER
P=arraydecl | type1 IDENTIFIER [ nr ] ;
P=type | type1
P=type | arraydecl
P=cmpdstmt | stmtlist
P=stmtlist | stmt 
P=stmtlist | stmt ; stmtlist
P=stmt | simplestmt 
P=stmt | structstmt
P=simplestmt | assignstmt 
P=simplestmt | iostmt
P=assignstmt | IDENTIFIER = expression 
P=assignstmt | constants
P=expression | expression + factor 
P=expression | expression - factor 
P=expression | expression * factor 
P=expression | expression / factor 
P=expression | expression ^ factor 
P=expression | expression mod factor 
P=expression | factor 
P=factor | ( expression ) 
P=factor | IDENTIFIER
P=factor | IDENTIFIER ++
P=factor | IDENTIFIER --
P=iostmt | READ ( IDENTIFIER )
P=iostmt | WRITE ( IDENTIFIER )
P=iostmt | PRINT ( IDENTIFIER )
P=structstmt | cmpdstmt
P=structstmt | ifstmt 
P=structstmt | whilestmt 
P=structstmt | forstmt
P=ifstmt  | if ( condition ) { stmt } else { stmt }
P=whilestmt | while ( condition ) { stmt }
P=forstmt | for ( assignstmt ; condition ; factor ) { stmt }
P=condition | expression RELATION expression and condition
P=condition | expression RELATION expression or condition
P=RELATION | <
P=RELATION | <=
P=RELATION | ==
P=RELATION | !=
P=RELATION | >=
P=RELATION | >
S=main